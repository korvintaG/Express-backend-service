openapi: 3.0.0
info:
  title: Express Backend Service
  version: 1.0.0
  description: API для управления пользователями с JWT-авторизацией и ролями (admin/user)
servers:
  - url: http://localhost:3000
tags:
  - name: Auth
  - name: Users
paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Регистрация пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Ошибка валидации или email уже используется
  /auth/login:
    post:
      tags: [Auth]
      summary: Авторизация пользователя (логин)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Успешная авторизация
          headers:
            Set-Cookie:
              description: HttpOnly cookie с refreshToken
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  id:
                    type: string
        '401':
          description: Неверные учетные данные
  /auth/refresh:
    post:
      tags: [Auth]
      summary: Обновление accessToken по refreshToken из cookie
      responses:
        '200':
          description: Новый accessToken
          headers:
            Set-Cookie:
              description: HttpOnly cookie с новым refreshToken
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '401':
          description: Нет refreshToken или он невалиден
  /users/{id}:
    get:
      tags: [Users]
      summary: Получить пользователя по ID (admin или сам пользователь)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Данные пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '403':
          description: Нет доступа
    patch:
      tags: [Users]
      summary: Заблокировать пользователя (admin или сам пользователь)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Пользователь заблокирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '403':
          description: Нет доступа
  /users:
    get:
      tags: [Users]
      summary: Получить список пользователей (только admin)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '403':
          description: Нет доступа
  /users/{id}/promote:
    patch:
      tags: [Users]
      summary: Повысить пользователя до admin (только admin)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Пользователь повышен до admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '403':
          description: Нет доступа
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterDto:
      type: object
      required: [fullName, birthDate, email, password]
      properties:
        fullName:
          type: string
        birthDate:
          type: string
          format: date
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
    LoginDto:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
    UserResponse:
      type: object
      properties:
        id:
          type: string
        fullName:
          type: string
        birthDate:
          type: string
          format: date
        email:
          type: string
        role:
          type: string
          enum: [admin, user]
        isActive:
          type: boolean 